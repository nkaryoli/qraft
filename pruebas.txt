/* eslint-disable @typescript-eslint/no-explicit-any */
import Layout from '@/components/Layout';
import { useSession, useUser } from '@clerk/clerk-react';
import { createClient } from '@supabase/supabase-js';
import { useEffect, useState } from 'react';
import type { SupabaseClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

const HomePage = () => {
    const [tasks, setTasks] = useState<any[]>([]);
    const [loading, setLoading] = useState(true);
    const [name, setName] = useState('');
    const { user } = useUser();
    const { session } = useSession();

    const [client, setClient] = useState<SupabaseClient | null>(null);

    useEffect(() => {
        const initSupabase = async () => {
            try{
                const token = await session?.getToken({ template: 'supabase' });
                if (!token) {
                    setLoading(false);
                    console.log("error fetching tocken");
                    return;
                }
                
                const supabaseWithAuth = createClient(supabaseUrl, supabaseAnonKey, {
                    global: {
                        headers: {
                            Authorization: `Bearer ${token}`,
                        },
                    },
                });
                setClient(supabaseWithAuth);
            } catch (error) {
                console.error('Error initializing Supabase:', error);
                setLoading(false);
            }
        };
        
        if (session) {
            initSupabase();
        } else {
            setLoading(false);
        }
    }, [session]);

    useEffect(() => {
        if (!user || !client) {
            setLoading(false);
            return;
        }

        const loadTasks = async () => {
            try {
                setLoading(true);
                const { data, error } = await client.from('tasks').select();

                if (error) {
                    console.error('Error loading tasks:', error);
                    setTasks([]);
                } else {
                    setTasks(data || []);
                }            
            } catch (error) {
                console.error('Unexpected error:', error);
                setTasks([]);
            } finally {
                setLoading(false);
            }
        };

        loadTasks();
    }, [user, client]);

    const createTask = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        if (!client) return;

        await client.from('tasks').insert({ name });
        setName('');
        // actualiza lista
        const { data } = await client.from('tasks').select();
        setTasks(data || []);
    };

    return (
        <Layout>
            <div className="p-4 max-w-md mx-auto">
                <h1 className="text-xl font-bold mb-4">Tasks</h1>

                {loading && <p>Loading...</p>}
                {!loading && tasks.length > 0 && tasks.map((task) => <p key={task.id}>{task.name}</p>)}
                {!loading && tasks.length === 0 && <p>No tasks found</p>}

                <form onSubmit={createTask} className="mt-4 flex gap-2">
                    <input
                        className="border p-2 flex-grow"
                        type="text"
                        name="name"
                        placeholder="Enter new task"
                        onChange={(e) => setName(e.target.value)}
                        value={name}
                    />
                    <button type="submit" className="bg-blue-500 text-white px-4 py-2 rounded">
                        Add
                    </button>
                </form>
            </div>
        </Layout>
    );
};

export default HomePage;


import { Button } from "@/components/ui/button";
import { useUser } from "@clerk/clerk-react"
// import { useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { BarLoader } from "react-spinners";

const OnboardingPage = () => {
	const { user, isLoaded } = useUser();
	const navigate = useNavigate();
	
	const handleRoleSelection = async (role:string) => {
		await user?.update({
			unsafeMetadata: { role },
		})
		.then(() => {
			navigate(role === 'admin' ? '/dashboard' : '/qrGenerator');
		})
		.catch((err) => {
			console.log("Error updating role:", err);
		})
	}
	
	// useEffect(() => {
	// 	if(user?.unsafeMetadata?.role) {
	// 		navigate(
	// 			user?.unsafeMetadata?.role === 'admin' ? '/dashboard' : '/qrGenerator'
	// 		);
	// 	}
	// // eslint-disable-next-line react-hooks/exhaustive-deps
	// }, [user])

	if (!isLoaded) {
		return <BarLoader className='absolute mb-4' width={'100%'} color='#db073d' />
	}

	return (
			<div className="flex flex-col items-center justify-center mt-32">
				<h1 className="font-extrabold text-7xl sm:text-8xl tracking-tight">I am a...</h1>
				<div className="mt-16 grid grid-cols-2 gap-4 w-full md:px-40 ">
					<Button variant='secondary' className="h-16 text-lg"
						onClick={() => handleRoleSelection("member")}
					>
						User
					</Button>
					<Button 
						onClick={() => handleRoleSelection("admin")}
						className="h-16 text-lg"
					>
						Organization
					</Button>
				</div>
			</div>
	)
}

export default OnboardingPage;

import { Button } from "@/components/ui/button";
import { useUser } from "@clerk/clerk-react"
// import { useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { BarLoader } from "react-spinners";

const CustomBadgePage = () => {
	const { user, isLoaded } = useUser();
	const navigate = useNavigate();
	
	const handleRoleSelection = async (role:string) => {
		await user?.update({
			unsafeMetadata: { role },
		})
		.then(() => {
			navigate(role === 'admin' ? '/dashboard' : '/qrGenerator');
		})
		.catch((err) => {
			console.log("Error updating role:", err);
		})
	}
	
	// useEffect(() => {
	// 	if(user?.unsafeMetadata?.role) {
	// 		navigate(
	// 			user?.unsafeMetadata?.role === 'admin' ? '/dashboard' : '/qrGenerator'
	// 		);
	// 	}
	// // eslint-disable-next-line react-hooks/exhaustive-deps
	// }, [user])

	if (!isLoaded) {
		return <BarLoader className='absolute mb-4' width={'100%'} color='#db073d' />
	}

	return (
			<div className="flex flex-col items-center justify-center mt-32">
				<h1 className="font-extrabold text-7xl sm:text-8xl tracking-tight">I am a...</h1>
				<div className="mt-16 grid grid-cols-2 gap-4 w-full md:px-40 ">
					<Button variant='secondary' className="h-16 text-lg"
						onClick={() => handleRoleSelection("member")}
					>
						User
					</Button>
					<Button 
						onClick={() => handleRoleSelection("admin")}
						className="h-16 text-lg"
					>
						Organization
					</Button>
				</div>
			</div>
	)
}

export default CustomBadgePage;


import type { SupabaseClient } from "@supabase/supabase-js";
import type { Member, MemberInput } from 'supabase/types';

export const MembersAPI = (client: SupabaseClient) => ({

	async getMembers(): Promise<Member[]> {
		const { data, error } = await client
		.from('members')
		.select('*')

		if (error) throw new Error(`Supabase error: ${error.message}`);
		return data || [];
	},

	async create(input: MemberInput): Promise<Member> {
		const { data, error } = await client
		.from('Members')
		.insert(input)
		.select()
		.single()

		if (error) throw new Error(`Error creating member: ${error.message}`)
			return data;
	}
})


import { useEffect, useState } from 'react';
import { useUser } from '@clerk/clerk-react';
import { useSupabase } from '@/hooks/useSupabaseAuth';
import { OrganizationsAPI } from '@/api/apiOrganizations';
import type { Member, MemberInput, Organization, OrganizationInput } from '@/supabase/types';
import { BarLoader } from 'react-spinners';
import { MembersAPI } from '@/api/apiMembers';

const OrgDashboard = () => {
	const { user } = useUser();
	const supabase = useSupabase();
	const [orgs, setOrgs] = useState<Organization[]>([]);
	const [loading, setLoading] = useState(true);

	const [members, setMembers] = useState<Member[]>([]);
	console.log(user)
	// Cargar organizaciones del usuario
	useEffect(() => {
		if (!supabase || !user?.id) return;

		const loadOrgs = async () => {
			try {
				setLoading(true);
				const orgApi = OrganizationsAPI(supabase);
				const userOrgs = await orgApi.getUserOrganizations(user.id);
				setOrgs(userOrgs);
			} catch (error) {
				console.error('Error loading organizations:', error);
			} finally {
				setLoading(false);
			}
		};

		const loadMembers = async () => {
			try {
				setLoading(true);
				const membersApi = MembersAPI(supabase);
				const dataMembers = await membersApi.getMembers();
				setMembers(dataMembers);
			} catch (error) {
				console.error('Error loading Members:', error);
			} finally {
				setLoading(false);
			}
		};

		loadMembers();
		loadOrgs();
	}, [supabase, user?.id]);

	// Crear nueva organizaciÃ³n
	const handleCreateOrg = async () => {
		if (!supabase || !user?.id) return;

		try {
			const newOrg: OrganizationInput = {
				name: 'Mippp Nueva Escuela',
				slug: 'mi-escuela-' + Math.random().toString(36).substring(2, 6),
				logo_url: 'https://ujchqjqvkworevjmpefo.supabase.co/storage/v1/object/public/organization-logo//qrNK.svg',
				theme: {
					background: '#3b82f6',
				},
				owner_id: user.id,
			};

			const orgApi = OrganizationsAPI(supabase);
			const createdOrg = await orgApi.create(newOrg);
			setOrgs([...orgs, createdOrg]);

		} catch (error) {
			alert('Error creating organization: ' + (error as Error).message);
		}
	};

	if (loading) return <div>Loading organizations...</div>;

	const handleCreateMember = async () => {
		if (!supabase || !user?.id) return;

		try {
			const newMember: MemberInput = {
				user_id: user.id,
				role: 'member',
				organization_id: 5,
			};

			const memberApi = MembersAPI(supabase);
			const createdMember = await memberApi.create(newMember);
			setMembers([...members, createdMember]);

		} catch (error) {
			alert('Error creating Member: ' + (error as Error).message);
		}
	};

	return (
		<>
			{loading && <BarLoader className='absolute mb-4' width={'100%'} color='#db073d' />}
			{!loading &&
				<div className="p-4">
					<h1 className="text-2xl font-bold mb-4">Your Organizations</h1>
					
					<button 
						onClick={handleCreateOrg}
						className="bg-blue-500 text-white px-4 py-2 rounded mb-4"
					>
						Create New Organization
					</button>

					<div className="grid grid-cols-1 md:grid-cols-3 gap-4">
						{orgs.map((org) => (
							<div key={org.id} className="border p-4 rounded-lg">
								<h2 className="text-xl font-semibold">{org.name}</h2>
								<p className="text-gray-600">qraft.dev/orgs/{org.slug}</p>
								<div 
									className="h-4 mt-2 rounded" 
									style={{ backgroundColor: org.theme.background }}
								/>
							</div>
						))}
					</div>
				</div>
			}
			{!loading &&
				<div className="p-4">
					<h1 className="text-2xl font-bold mb-4">Members</h1>
					<button 
						onClick={handleCreateMember}
						className="bg-blue-500 text-white px-4 py-2 rounded mb-4"
					>
						Create New Member
					</button>
					<div className="grid grid-cols-1 md:grid-cols-3 gap-4">
						{members.map((member) => (
							<div key={member.id} className="border p-4 rounded-lg">
								<h2 className="text-xl font-semibold">{member.role}</h2>
								<p className="text-gray-600">{member.organization_id}</p>
								<p className="text-gray-600">{member.user_id}</p>
								<p className="text-gray-600">{member.id}</p>
							</div>
						))}
					</div>
				</div>
			}
		</>
	);
};

export default OrgDashboard;









import { useState, useEffect, useRef } from 'react';
import QRCodeStyling from 'qr-code-styling';
import type { QRConfig } from '../types';
import { useUser } from '@clerk/clerk-react';
import { useSupabase } from './useSupabaseAuth';
import { QRCodeAPI } from '@/api/apiQRCode';

export function useQRCode() {
    const [qrCode, setQrCode] = useState<QRCodeStyling | null>(null);
    const qrRef = useRef<HTMLDivElement>(null);
    const { user } = useUser();
    const supabase = useSupabase();
    
    // Inicializar el QR
    useEffect(() => {
        if (!qrCode) {
            const newQR = new QRCodeStyling({
                width: 300,
                height: 300,
                data: '',
                dotsOptions: {
                    color: '#000000',
                    type: 'rounded',
                },
                backgroundOptions: {
                    color: '#ffffff',
                },
            });
            setQrCode(newQR);
        }
    }, [qrCode]);

    // Actualizar el QR cuando cambia la referencia
    useEffect(() => {
        if (qrCode && qrRef.current) {
            qrCode.append(qrRef.current);
        }
    }, [qrCode, qrRef]);

    // Guardar QR en Supabase
    const handleSaveQRCode = async ( title: string, qr_data: string, qr_template: QRConfig,) => {
        if (!supabase || !user?.id) return;

        try {
            console.log('conection statrs');
            const newQR = {
                qr_data,
                user_id: user.id,
                qr_template,
                title,
            }
            const qrApi = QRCodeAPI(supabase);
            await qrApi.create(newQR);
        } catch (error) {
            console.log('Error saving qr:', error);
        }
    }

    // Cargar QR desde Supabase
    // const loadQR = async (qrId: string) => {
    //     const { data, error } = await supabase.from('qrcodes').select('*').eq('id', qrId).single();

    //     if (error) throw error;
    //     return data as QRCodeRecord;
    // };

    // return { qrRef, qrCode, updateQR, saveQR, loadQR };
    return { qrRef, qrCode, handleSaveQRCode};
}





QRGENERATOR FEATURE

import { useQRCode } from '../../../hooks/useQRCode';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { useState } from 'react';
import type { QRConfig } from '../../../types';

export function QRGenerator() {
    const { qrRef, updateQR, saveQR } = useQRCode();
    const [content, setContent] = useState('');
    const [title, setTitle] = useState('');
    const [qrConfig, setQrConfig] = useState<QRConfig>({
        width: 300,
        height: 300,
        data: '',
        dotsOptions: {
            color: '#000000',
            type: 'rounded',
        },
        backgroundOptions: {
            color: '#ffffff',
        },
    });

    const handleGenerate = () => {
        const newConfig = {
            ...qrConfig,
            data: content,
        };
        updateQR(newConfig);
        setQrConfig(newConfig);
    };

    const handleSave = async () => {
        try {
            // AquÃ­ deberÃ­as obtener el userId de Clerk
            const userId = 'user-id-from-clerk';
            await saveQR(userId, title, content, qrConfig);
            // Mostrar notificaciÃ³n de Ã©xito
        } catch (error) {
            // Mostrar error
            console.log(error);
        }
    };

    return (
        <Card>
            <CardHeader>
                <CardTitle>Generador de QR</CardTitle>
            </CardHeader>
            <CardContent className="grid gap-4">
                <div className="grid gap-2">
                    <Label htmlFor="title">TÃ­tulo</Label>
                    <Input
                        id="title"
                        value={title}
                        onChange={(e) => setTitle(e.target.value)}
                        placeholder="Mi cÃ³digo QR personal"
                    />
                </div>
                <div className="grid gap-2">
                    <Label htmlFor="content">Contenido del QR</Label>
                    <Input
                        id="content"
                        value={content}
                        onChange={(e) => setContent(e.target.value)}
                        placeholder="https://ejemplo.com"
                    />
                </div>
                <div className="flex gap-2">
                    <Button onClick={handleGenerate}>Generar QR</Button>
                    <Button variant="outline" onClick={handleSave}>
                        Guardar QR
                    </Button>
                </div>
                <div ref={qrRef} className="flex justify-center mt-4" />
            </CardContent>
        </Card>
    );
}








import { forwardRef, useEffect, useImperativeHandle, useRef } from "react";
import QRCodeStyling, { type Options as QRCodeOptions } from "qr-code-styling";
import type { QRDisplayRef } from "@/components/qrCode/QRDisplay";

interface QRDisplayProps {
	config: QRCodeOptions;  // Usa directamente el tipo de la librerÃ­a
	className?: string;
}

export const QRDisplay = forwardRef<QRDisplayRef, QRDisplayProps>(({ config, className }, ref) => {
	const qrRef = useRef<HTMLDivElement>(null);
	const qrCodeRef = useRef<QRCodeStyling | null>(null);

	useEffect(() => {
		if (!qrCodeRef.current) {
		qrCodeRef.current = new QRCodeStyling(config);
		if (qrRef.current) qrCodeRef.current.append(qrRef.current);
		} else {
		qrCodeRef.current.update(config);
		}
	}, [config]);

	useImperativeHandle(ref, () => ({
		download: (fileName = "qr-code") => {
		qrCodeRef.current?.download({ name: fileName, extension: "png" });
		},
	}));

	return (
		<div className={`flex justify-center ${className || ""}`}>
		<div ref={qrRef} />
		</div>
	);
});

import { useEffect, useRef, useState, type ChangeEvent } from "react";

import QRCodeStyling, {
 type DrawType,
 type TypeNumber,
 type Mode,
type  ErrorCorrectionLevel,
 type DotType,
type  CornerSquareType,
 type CornerDotType,

 type Options
}  from "qr-code-styling";
import {QRDisplay} from "./QRDisplay";
// import Extension from 'qr-code-styling';

const styles = {
  inputWrapper: {
    margin: "20px 0",
    display: "flex",
    justifyContent: "space-between",
    width: "100%",
    maxWidth: "300px"
  },
  inputBox: {
    flexGrow: 1,
    marginRight: 20
  }
};


const AboutPage = () => {
    const [options, setOptions] = useState<Options>({
    width: 300,
    height: 300,
    type: 'svg' as DrawType,
    data: 'http://qr-code-styling.com',
    image: '',
    margin: 10,
    qrOptions: {
        typeNumber: 0 as TypeNumber,
        mode: 'Byte' as Mode,
        errorCorrectionLevel: 'Q' as ErrorCorrectionLevel
    },
    imageOptions: {
        hideBackgroundDots: true,
        imageSize: 0.4,
        margin: 20,
        crossOrigin: 'anonymous',
    },
    dotsOptions: {
        color: '#22222',
        // gradient: {
        //   type: 'linear', // 'radial'
        //   rotation: 0,
        //   colorStops: [{ offset: 0, color: '#8688B2' }, { offset: 1, color: '#77779C' }]
        // },
        type: 'rounded' as DotType
    },
    backgroundOptions: {
        color: '#5FD4F3',
      // gradient: {
      //   type: 'linear', // 'radial'
      //   rotation: 0,
      //   colorStops: [{ offset: 0, color: '#ededff' }, { offset: 1, color: '#e6e7ff' }]
      // },
    },
    cornersSquareOptions: {
        color: '#222222',
        type: 'extra-rounded' as CornerSquareType,
      // gradient: {
      //   type: 'linear', // 'radial'
      //   rotation: 180,
      //   colorStops: [{ offset: 0, color: '#25456e' }, { offset: 1, color: '#4267b2' }]
      // },
    },
    cornersDotOptions: {
        color: '#222222',
        type: 'dot' as CornerDotType,
      // gradient: {
      //   type: 'linear', // 'radial'
      //   rotation: 180,
      //   colorStops: [{ offset: 0, color: '#00266e' }, { offset: 1, color: '#4060b3' }]
      // },
    }
    });
    // const [fileExt, setFileExt] = useState<Extension>("svg");
    const [qrCode] = useState<QRCodeStyling>(new QRCodeStyling(options));
    const ref = useRef<HTMLDivElement>(null);
    
    useEffect(() => {
        if (ref.current) {
        qrCode.append(ref.current);
        }
    }, [qrCode, ref]);

    useEffect(() => {
        if (!qrCode) return;
        qrCode.update(options);
    }, [qrCode, options]);

    const onDataChange = (event: ChangeEvent<HTMLInputElement>) => {
        setOptions(options => ({
        ...options,
        data: event.target.value
        }));
    };

    const onDownloadClick = () => {
        if (!qrCode) return;
        qrCode.download({
            // extension: fileExt
        });
    };

    return (
        <div className="bg-primary/20 mt-32">
            <h2>QR code styling for React</h2>
            <div ref={ref} />
            <div style={styles.inputWrapper}>
                <input value={options.data} onChange={onDataChange} style={styles.inputBox} />

                {/* </select> */}
                <button onClick={onDownloadClick}>Download</button>
            </div>

            <QRDisplay config={options}/>
        </div>
    );
}

export default AboutPage;



import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
